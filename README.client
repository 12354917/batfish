
# Instructions for a simple demo that uses the batfish client.
# This file also serves as input the client when used with -cmdfile option

# First, "source tools/batfish_functions.sh"

# Then, if you running everything locally
#     % allinone -runmode interactive
# If you are testing against www.batfish.org
#     % batfish_client -runmode interactive

# ------------------
# The following commands are typed on the batfish client's shell. 
# They assume that the client was started in the top-level batfish directory.

# load the testing. this command will populate vendor neutral structures
init-testrig -nodataplane test_rigs/example

# answer two simple questions on adjacencies
# --> can help ensure that adjacencies are as expected
get neighbors 
get neighbors neighborType=["ebgp"]

# examples of other simple checks
# ---> can easily check for such best practices in a vendor (syntax) neutral manner
get uniqueipassignments
get ospfloopbacks

# a simple traceroute command. the macro below expands to "get traceroute ingressNode=host1 | dstIp=1.0.2.2"
# --> unlike a regular traceroute we show multipath and interface information too (and of course without applying the configuration to the network)
get #traceroute host1 1.0.2.2

# host1 (2.128.0.101) is running DNS and we want to ensure that the server is reachable 
# --> can easily do this using traceroute 
get #traceroute as2border1 2.128.0.101 dns

# DNS accessibility can be done using testing as well but we can be copmrehensive.
# the following question will return all (startingnodes, packetheader) combinations that cannot reach the DNS server
# the macro expands to "get reachability dstPrefixes=["2.128.0.101/32"] | dstPortRange=["53-53"] | ipProtoRange=["17-17"] | actions=["drop"]
# --> we will see a few violations: outsiders with spoofed source addresses (expected and can be filtered) and a bad ACL on host2 (unexpected)
get #checkreachability 2.128.0.101 dns

# host2 (2.128.1.101) is running SSH and we can run similar queries to learn who cannot reach it
# but suppose we also want to ensure that no non-ssh traffic can ever reach host2 
# --> hard to find out with testing but easy for us
get #checkprotection 2.128.1.101 !ssh

# now suppose we also want to ensure that outsiders can never reach the SSH server
# we have ACLs on as2's border routers to prevent this
# --> but the ACL on as2border2 turns out to be buggy
get #checkprotection 2.128.1.101 ssh as(1|3).*

# sanity checking can be done in the data plane too
# check for multipath consistency. 
get reachability type=multipath


# things below have not been updated yet
# initialize the delta environment and generate its dataplane
init-diff-environment example_environments/delta

# reduced reachability between default and delta environments
answer example_questions/reduced_reachability.q
