block(`Route) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   export(`{
// BEGIN CODE

/// [AdministrativeDistance[protocol] = distance] =
///   The administrative distance of routing protocol [protocol] for vendor
///   [vendor] is [distance].
AdministrativeDistance[vendor, protocol] = distance ->
   Vendor(vendor),
   RoutingProtocol(protocol),
   int(distance).

BestConnectedRoute(route) ->
   Route(route).

/// [BestPerProtocol(node, network, nextHop, nextHopIp, admin, cost, protocol)] =
///   TODO.
BestPerProtocolRoute(route) ->
   Route(route).

BestStaticRoute(route) ->
   Route(route).

/// [ConnectedRoute(node, network)] =
///   Node [node] has a directly connected route to network [network] through [interface].
ConnectedRoute(node, network, interface) ->
   Node(node),
   Network(network),
   Interface(interface).

GeneratedRoute_constructor[node, network] = route ->
   Node(node),
   Network(network),
   Route(route).

/// [InstalledRoute(node, network, nextHop, nextHopIp, admin, cost, protocol)] =
///   TODO.
InstalledRoute(route) ->
   Route(route).

InterfaceRoute(route) ->
   Route(route).

InterfaceRoute_constructor[node, network, nextHopInt, protocol] = route ->
   Node(node),
   Network(network),
   Interface(nextHopInt),
   RoutingProtocol(protocol),
   Route(route).

LongestPrefixNetworkMatch(node, ip, matchNet) ->
   Node(node),
   Ip(ip),
   Network(matchNet).

LongestPrefixNetworkMatchPrefixLength[node, ip] = maxLength ->
   Node(node),
   Ip(ip),
   int(maxLength).
   
/// [MinAdmin[node, network] = minAdmin] =
///   The minimum administrative distance of any route from node [node] to
///   network [network] is [minAdmin].
MinAdmin[node, network] =  minAdmin ->
   Node(node),
   Network(network),
   int(minAdmin).

/// [MinAdminRoute(node, network, nextHop, nextHopIp, minAdmin, cost, protocol)] =
///   TODO.
MinAdminRoute(route) ->
   Route(route).

/// [MinCost[node, network, protocol] = minCost] =
///   The minimum cost of any best pre-cost route from node
///   [node] to network [network] is [minCost].
MinCost[node, network] =  minCost ->
   Node(node),
   Network(network),
   int(minCost).

/// [MinCostRoute(node, network, nextHop, nextHopIp, admin, minCost, protocol)] =
///   TODO.
MinCostRoute(route) ->
   Route(route).

NetworkMatch(node, ip, matchNet, matchLength) ->   
   Node(node),
   Ip(ip),
   Network(matchNet),
   int(matchLength).

OspfGeneratedRoute_constructor[node, network] = route ->
   Node(node),
   Network(network),
   Route(route).

/// [Route(x)] =
///   [x] is route.
Route(x) -> .

Route_admin[route] = admin ->
   Route(route),
   int(admin).

Route_constructor[node, network, nextHopIp, protocol] = route ->
   Node(node),
   Network(network),
   Ip(nextHopIp),
   RoutingProtocol(protocol),
   Route(route).

Route_cost[route] = cost ->
   Route(route),
   int(cost).

Route_network[route] = network ->
   Route(route),
   Network(network).

Route_nextHop[route] = nextHop ->
   Route(route),
   Node(nextHop).

Route_nextHopInt[route] = nextHopInt ->
   Route(route),
   Interface(nextHopInt).

Route_nextHopIp[route] = nextHopIp ->
   Route(route),
   Ip(nextHopIp).

Route_node[route] = node ->
   Route(route),
   Node(node).

Route_protocol[route] = protocol ->
   Route(route),
   RoutingProtocol(protocol).

Route_tag[route] = tag ->
   Route(route),
   int(tag).

/// [RoutingProtocol(x)] =
///   [x] is routing protocol.
RoutingProtocol(x),
   RoutingProtocol_name(x:n)
   ->
   string(n).

RoutingProtocol_AGGREGATE[] = x ->
   RoutingProtocol(x).

RoutingProtocol_BGP[] = x ->
   RoutingProtocol(x).

RoutingProtocol_CONNECTED[] = x ->
   RoutingProtocol(x).

RoutingProtocol_IBGP[] = x ->
   RoutingProtocol(x).

RoutingProtocol_OSPF[] = x ->
   RoutingProtocol(x).

RoutingProtocol_OSPF_E2[] = x ->
   RoutingProtocol(x).

RoutingProtocol_OSPF_IA[] = x ->
   RoutingProtocol(x).

RoutingProtocol_STATIC[] = x ->
   RoutingProtocol(x).

SetStaticIntRoute(node, network, nextHopIp, nextHopInt, admin) ->
   Node(node),
   Network(network),
   Ip(nextHopIp),
   Interface(nextHopInt),
   int(admin).

SetStaticIntRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, nextHopInt, admin) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   Ip(nextHopIp),
   Interface(nextHopInt),
   int(admin).
   
/// [SetStaticRoute(node, network, nextHopIp, admin)] =
///   Node [node] has a static route to network [network] with next hop ip
///   [nextHopIp] and administrative distance [admin].
SetStaticRoute(node, network, nextHopIp, admin) ->
   Node(node),
   Network(network),
   Ip(nextHopIp),
   int(admin).
   
SetStaticRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, admin) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   Ip(nextHopIp),
   int(admin).
   
StaticIntRoute(route) ->
   Route(route).

/// [StaticRoute(route)] =
///   TODO.
StaticRoute(route) ->
   Route(route).

// END CODE
   }),
   clauses(`{ //constructors
lang:constructor(`GeneratedRoute_constructor).
lang:constructor(`InterfaceRoute_constructor).
lang:constructor(`Route_constructor).
lang:constructor(`OspfGeneratedRoute_constructor).
   })
} <-- .

