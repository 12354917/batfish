block(`Flow) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   export(`{
// BEGIN CODE

/// [Flow(x)] =
///   [x] is a traffic flow.
Flow(x) -> .

Flow_dscp[flow] = dscp ->
   Flow(flow),
   int(dscp).

Flow_dstIp[flow] = dstIp ->
   Flow(flow),
   Ip(dstIp).

Flow_dstPort[flow] = dstPort ->
   Flow(flow),
   int(dstPort).

Flow_ecn[flow] = ecn ->
   Flow(flow),
   int(ecn).

Flow_fragmentOffset[flow] = fragmentOffset ->
   Flow(flow),
   int(fragmentOffset).

Flow_icmpCode[flow] = icmpCode ->
   Flow(flow),
   int(icmpCode).

Flow_icmpType[flow] = icmpType ->
   Flow(flow),
   int(icmpType).

Flow_state[flow] = state ->
   Flow(flow),
   int(state).

Flow_tcpFlagsCWR[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsECE[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsURG[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsACK[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsPSH[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsRST[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsSYN[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_tcpFlagsFIN[flow] = bit ->
   Flow(flow),
   int(bit).

Flow_ipProtocol[flow] = protocol ->
   Flow(flow),
   IpProtocol(protocol).

Flow_node[flow] = node ->
   Flow(flow),
   Node(node).

Flow_srcIp[flow] = srcIp ->
   Flow(flow),
   Ip(srcIp).

Flow_srcPort[flow] = srcPort ->
   Flow(flow),
   int(srcPort).

Flow_tag[flow] = tag ->
   Flow(flow),
   FlowTag(tag).

FlowTag(x),
   FlowTag_tag(x:n)
->
   string(n).

/// [IpProtocol(x)] =
///   [x] is an ip protocol.
IpProtocol(x),
   IpProtocol_number(x:number)
   ->
   int(number).

IpProtocol_ANY[] = x ->
   IpProtocol(x).

IpProtocol_ICMP[] = x ->
   IpProtocol(x).

IpProtocol_TCP[] = x ->
   IpProtocol(x).

IpProtocol_UDP[] = x ->
   IpProtocol(x).

// END CODE
   })
} <-- .

