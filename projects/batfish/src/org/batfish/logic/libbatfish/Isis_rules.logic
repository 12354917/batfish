block(`Isis_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Isis),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

BestIsisL1Route(route),
   IsisL1Network(node, network)
<-
   IsisL1Route(route),
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   MinIsisL1RouteCost[node, network] = cost.

BestIsisL2Route(route),
   IsisL2Network(node, network)
<-
   IsisL2Route(route),
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   MinIsisL2RouteCost[node, network] = cost,
   !IsisL1Network(node, network).

BestPerProtocolRoute(route) <-
   BestIsisL1Route(route) ;
   BestIsisL2Route(route).

MinIsisL1RouteCost[node, network] = minCost <-
   agg<<minCost = min(cost)>>
      IsisL1Route(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

MinIsisL2RouteCost[node, network] = minCost <-
   agg<<minCost = min(cost)>>
      IsisL2Route(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

need_PolicyMapMatchRoute(map, route) <-
   SetIsisOutboundPolicyMap(node, map),
   Route_node[route] = node,
   InstalledRoute(route).

IsisExport(node, network, newCost, protocol) <-
   (
      InstalledRoute(route) ;
      (
         IsisGeneratedRoute(route),
         ActiveGeneratedRoute(route)
      )
   ),
   !NonIsisExportableRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetIsisOutboundPolicyMap(node, map),
   SetPolicyMapIsisExternalRouteType(map, protocol),
   PolicyMapPermitRoute(map, clause, route),
   (
      SetPolicyMapClauseSetMetric(map, clause, newCost) ;
      (
         !SetPolicyMapClauseSetMetric(map, clause, _),
         Route_cost[route] = newCost
      )
   ),
   (
      !ConnectedRoute(node, network, _) ;
      (
         ConnectedRoute(node, network, interface),
         !SetIsisInterfaceCost[node, interface] = _
      )
   ).

IsisGeneratedRoute(route),
   Route(route),
   GeneratedRoute_constructor[node, network, type] = route,
   GeneratedRoute(route),
   GeneratedRoute_type[route] = type,
   Route_network[route] = network,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   SetIsisGeneratedRoute(node, network),
   type = GeneratedRouteType_ISIS[],
   protocol = RoutingProtocol_AGGREGATE[].

GeneratedRoutePolicy(route, policy) <-
   IsisGeneratedRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetIsisGeneratedRoutePolicy(node, network, policy).

IsisL1Neighbors(node1, int1, cost1, node2, int2, cost2) <-
   SetIsisL1Node(node1),
   SetIsisL1Node(node2),
   SetIsisArea(node1, area),
   SetIsisArea(node2, area),
   LanAdjacent(node1, int1, node2, int2),
   SetIsisInterfaceCost(node1, int1, cost1),
   SetIsisInterfaceCost(node2, int2, cost2).

IsisL2Neighbors(node1, int1, cost1, node2, int2, cost2) <-
   SetIsisL2Node(node1),
   SetIsisL2Node(node2),
   SetIsisArea(node1, _),
   SetIsisArea(node2, _),
   LanAdjacent(node1, int1, node2, int2),
   SetIsisInterfaceCost(node1, int1, cost1),
   SetIsisInterfaceCost(node2, int2, cost2).

// (base case)
IsisL1Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   IsisL1Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   ConnectedRoute(nextHop, network, nextHopConnectedInt),
   SetIsisInterfaceCost[nextHop, nextHopConnectedInt] = nextHopIntCost,
   cost = nodeIntCost + nextHopIntCost,
   protocol = RoutingProtocol_ISIS_L1[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (base case - import routes exported into L1 by L1 neighbors
IsisL1Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   IsisL1Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   node != nextHop,
   IsisExport(nextHop, network, exportCost, protocol),
   cost = exportCost + nodeIntCost,
   protocol = RoutingProtocol_ISIS_L1[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (recursive case) propagate ospf over ospf
IsisL1Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   IsisL1Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   IsisL1Neighbors(nextHop, _, _, secondHop, _, _),
   BestIsisL1Route(subRoute),
   Route_cost[subRoute] = subCost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   HasIp(secondHop, secondHopIp),
   node != secondHop,
   cost = subCost + nodeIntCost,
   protocol = RoutingProtocol_ISIS_L1[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

// (base case)
IsisL2Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   IsisL2Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   ConnectedRoute(nextHop, network, nextHopConnectedInt),
   SetIsisInterfaceCost[nextHop, nextHopConnectedInt] = nextHopIntCost,
   cost = nodeIntCost + nextHopIntCost,
   protocol = RoutingProtocol_ISIS_L2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (base case - import routes exported into L2 by L2 neighbors
IsisL2Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   IsisL2Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   node != nextHop,
   IsisExport(nextHop, network, exportCost, protocol),
   cost = exportCost + nodeIntCost,
   protocol = RoutingProtocol_ISIS_L2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (base - leak L1 Routes into L2)
IsisL2Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   IsisL2Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   BestIsisL1Route(l1Route),
   Route_cost[l1Route] = l1RouteCost,
   Route_network[l1Route] = network,
   Route_node[l1Route] = nextHop,
   cost = nodeIntCost + l1RouteCost,
   protocol = RoutingProtocol_ISIS_L2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (recursive (forward L2 Routes)
IsisL2Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   IsisL2Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   IsisL2Neighbors(nextHop, _, _, secondHop, _, _),
   BestIsisL2Route(subRoute),
   Route_cost[subRoute] = subCost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   HasIp(secondHop, secondHopIp),
   node != secondHop,
   cost = subCost + nodeIntCost,
   protocol = RoutingProtocol_ISIS_L2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

SetIsisGeneratedRoute(node, network) <-
   SetIsisGeneratedRoute_flat(node, network_start, network_end, prefix_length),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetIsisGeneratedRoutePolicy(node, network, map) <-
   SetIsisGeneratedRoutePolicy_flat(node, network_start, network_end, prefix_length, map),
   Network_constructor[network_start, network_end, prefix_length] = network.

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })
} <-- .

