block(`IpAccessList) {
   alias_all(`libbatfish:Flow),
   export(`{
// BEGIN CODE

IpAccessList(list),
   IpAccessList_name(list:name)
   ->
   string(name).

IpAccessListDeny(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListFirstMatch[list, flow] = firstMatchLine ->
   IpAccessList(list),
   Flow(flow),
   int(firstMatchLine).

IpAccessListLine(list, line) ->
   IpAccessList(list),
   int(line).

IpAccessListMatch(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchDscp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchDstIp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchDstPort(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchEcn(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchIcmpCode(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchIcmpType(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchProtocol(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcIp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcOrDstIp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcOrDstPort(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcPort(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchState(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchTcpFlags(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListPermit(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

SetIpAccessListLine_deny(list, line) ->
   IpAccessList(list),
   int(line).

SetIpAccessListLine_dscp(list, line, dscp) ->
   IpAccessList(list),
   int(line),
   int(dscp).

SetIpAccessListLine_ecn(list, line, ecn) ->
   IpAccessList(list),
   int(line),
   int(ecn).

SetIpAccessListLine_dstIpRange(list, line, dstIp_start, dstIp_end) ->
   IpAccessList(list),
   int(line),
   int(dstIp_start),
   int(dstIp_end).

SetIpAccessListLine_dstPortRange(list, line, dstPort_start, dstPort_end) ->
   IpAccessList(list),
   int(line),
   int(dstPort_start),
   int(dstPort_end).

SetIpAccessListLine_icmpCode(list, line, icmpCode) ->
   IpAccessList(list),
   int(line),
   int(icmpCode).

SetIpAccessListLine_icmpType(list, line, icmpType) ->
   IpAccessList(list),
   int(line),
   int(icmpType).

SetIpAccessListLine_permit(list, line) ->
   IpAccessList(list),
   int(line).

SetIpAccessListLine_protocol(list, line, protocol) ->
   IpAccessList(list),
   int(line),
   IpProtocol(protocol).

SetIpAccessListLine_srcIpRange(list, line, srcIp_start, srcIp_end) ->
   IpAccessList(list),
   int(line),
   int(srcIp_start),
   int(srcIp_end).

SetIpAccessListLine_srcOrDstIpRange(list, line, srcOrDstIp_start, srcOrDstIp_end) ->
   IpAccessList(list),
   int(line),
   int(srcOrDstIp_start),
   int(srcOrDstIp_end).

SetIpAccessListLine_srcOrDstPortRange(list, line, srcOrDstPort_start, srcOrDstPort_end) ->
   IpAccessList(list),
   int(line),
   int(srcOrDstPort_start),
   int(srcOrDstPort_end).

SetIpAccessListLine_srcPortRange(list, line, srcPort_start, srcPort_end) ->
   IpAccessList(list),
   int(line),
   int(srcPort_start),
   int(srcPort_end).

SetIpAccessListLine_state(list, line, state) ->
   IpAccessList(list),
   int(line),
   int(state).

SetIpAccessListLine_tcpFlags(list, line, alternative) ->
   IpAccessList(list),
   int(line),
   int(alternative).

SetIpAccessListLine_tcpFlagsCWR(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsECE(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsURG(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsACK(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsPSH(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsRST(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsSYN(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetIpAccessListLine_tcpFlagsFIN(list, line, alternative, bit) ->
   IpAccessList(list),
   int(line),
   int(alternative),
   int(bit).

SetCrossZoneFilter(node, srcZone, dstZone, filter) ->
   Node(node),
   Zone(srcZone),
   Zone(dstZone),
   IpAccessList(filter).

SetDefaultCrossZoneAccept(node) ->
   Node(node).

SetDefaultInboundAccept(node) ->
   Node(node).

SetInboundInterfaceFilter(node, interface, filter) ->
   Node(node),
   Interface(interface),
   IpAccessList(filter).

SetInterfaceZone(node, interface, zone) ->
   Node(node),
   Interface(interface),
   Zone(zone).

SetZoneFromHostFilter(node, zone, filter) ->
   Node(node),
   Zone(zone),
   IpAccessList(filter).

SetZoneToHostFilter(node, zone, filter) ->
   Node(node),
   Zone(zone),
   IpAccessList(filter).

Zone(zone),
   Zone_name(zone:name)
->
   string(name).

// END CODE
   })
} <-- .
