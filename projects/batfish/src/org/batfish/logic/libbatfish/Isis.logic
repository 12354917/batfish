block(`Isis) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   export(`{
// BEGIN CODE

BestIsisL1Route(route) ->
   Route(route).

BestIsisL2Route(route) ->
   Route(route).

MinIsisL1RouteCost[node, network] = minCost ->
   Node(node),
   Network(network),
   int(minCost).

MinIsisL2RouteCost[node, network] = minCost ->
   Node(node),
   Network(network),
   int(minCost).

NonIsisExportableRoute(route) ->
   Route(route).

IsisL1Network(node, network) ->
   Node(node),
   Network(network).

IsisL1Route(route) ->
   Route(route).

IsisL2Route(route) ->
   Route(route).

IsisExport(node, network, cost, protocol) ->
   Node(node),
   Network(network),
   int(cost),
   RoutingProtocol(protocol).

IsisL1Neighbors(node1, int1, cost1, node2, int2, cost2) ->
   Node(node1),
   Interface(int1),
   int(cost1),
   Node(node2),
   Interface(int2),
   int(cost2).

IsisL2Neighbors(node1, int1, cost1, node2, int2, cost2) ->
   Node(node1),
   Interface(int1),
   int(cost1),
   Node(node2),
   Interface(int2),
   int(cost2).

IsisIANeighbors(node1, int1, cost1, node2, int2, cost2) ->
   Node(node1),
   Interface(int1),
   int(cost1),
   Node(node2),
   Interface(int2),
   int(cost2).

IsisL2Network(node, network) ->
   Node(node),
   Network(network).

SetIsisL1Node(node) ->
   Node(node).

SetIsisL2Node(node) ->
   Node(node).

SetIsisInterface(node, interface) ->
   Node(node),
   Interface(interface).

SetIsisInterfaceCost[node, interface] = cost ->
   Node(node),
   Interface(interface),
   int(cost).

SetIsisArea(node, area) ->
   Node(node),
   int(area).

SetIsisSystemId(node, systemId) ->
   Node(node),
   int(systemId).

// END CODE
   })
} <-- .

