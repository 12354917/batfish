package org.batfish.specifier;

import com.google.common.annotations.VisibleForTesting;
import java.util.Objects;
import java.util.Set;
import org.batfish.datamodel.AclIpSpace;
import org.batfish.datamodel.Ip;
import org.batfish.datamodel.IpRange;
import org.batfish.datamodel.IpSpace;
import org.batfish.datamodel.IpWildcard;
import org.batfish.datamodel.Prefix;
import org.batfish.specifier.parboiled.AstNode;
import org.batfish.specifier.parboiled.IpSpaceAstNode;
import org.batfish.specifier.parboiled.LeafAstNode;

/**
 * An {@link IpSpaceSpecifier} that resolves based on the AST generated by {@link
 * org.batfish.specifier.parboiled.Parser}.
 */
public final class ParboiledIpSpaceSpecifier implements IpSpaceSpecifier {
  private final AstNode _ast;

  public ParboiledIpSpaceSpecifier(AstNode ast) {
    _ast = ast;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ParboiledIpSpaceSpecifier)) {
      return false;
    }
    return Objects.equals(_ast, ((ParboiledIpSpaceSpecifier) o)._ast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_ast);
  }

  @Override
  public IpSpaceAssignment resolve(Set<Location> locations, SpecifierContext ctxt) {
    IpSpace ipSpace = computeIpSpace(_ast, ctxt);
    return IpSpaceAssignment.builder().assign(locations, ipSpace).build();
  }

  // TODO: tests for this function
  @VisibleForTesting
  static IpSpace computeIpSpace(AstNode ast, SpecifierContext ctxt) {
    if (ast instanceof IpSpaceAstNode) {
      IpSpaceAstNode node = (IpSpaceAstNode) ast;
      switch (node.getType()) {
        case ADDRESS_GROUP:
          String addressGroup = (String) ((LeafAstNode) ast.left()).getValue();
          String book = (String) ((LeafAstNode) ast.right()).getValue();
          return ReferenceAddressGroupIpSpaceSpecifier.computeIpSpace(addressGroup, book, ctxt);
        case COMMA:
          IpSpace leftSpace = computeIpSpace(ast.left(), ctxt);
          IpSpace rightSpace = computeIpSpace(ast.right(), ctxt);
          return AclIpSpace.union(leftSpace, rightSpace);
        case RANGE:
          Ip leftIp = (Ip) ((LeafAstNode) ast.left()).getValue();
          Ip rightIp = (Ip) ((LeafAstNode) ast.right()).getValue();
          return IpRange.range(leftIp, rightIp);
        default:
          throw new IllegalStateException(
              String.format("Unhandled IpSpaceAstNode type for IpSpace %s", node.getType()));
      }
    } else if (ast instanceof LeafAstNode) {
      Object value = ((LeafAstNode) ast).getValue();
      if (value instanceof Ip) {
        return ((Ip) value).toIpSpace();
      } else if (value instanceof IpWildcard) {
        return ((IpWildcard) value).toIpSpace();
      } else if (value instanceof Prefix) {
        return ((Prefix) value).toIpSpace();
      } else {
        throw new IllegalStateException(
            String.format("Unhandled LeafAstNode type for IpSpace %s", ast));
      }
    } else {
      throw new IllegalStateException(String.format("Unhandled AstNode type for IpSpace %s", ast));
    }
  }
}
